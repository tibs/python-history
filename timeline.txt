Timeline
========

* Feb 1991 0.9.0

* Feb 1991 0.9.1p1

  - no ``__init__`` method
  - no double quote strings
  - adds ``else`` for for loops

* 0.9.2 - never properly released

  - semicolons to separate statements
  - ``continue``
  - ``{key: value}`` to define a dictionary
  - blank and comment lines don't need to be correctly indented(!)
  - ``1 == 1.0``
  - ``.pyc`` files
  - first ``pythonmode.el``
  - tutorial nearly complete
  - arbitrary precision integers

* 0.9.3 - again, probably not very released

  - ``global`` statement
  - ``class B`` allowed, instead of ``class B()``, and can do ``class B(D)``
  - C shifting and masking operators (``<<``, etc)
  - C comparison operators  (``==`` and ``!=``) - the previous ``=`` and
    ``<>`` are still allowed
  - class attributes are no long read-only

* Dec 1991 0.9.4alpha

  - new exceptions
  - functions are called with 0..N arguments, not just 0 or 1. So:
    ``def init(self, (x, y))`` becomes ``def init(self, x, y)``
  - ``x[-1]`` is equivalent to ``x[len(x)-1]``

* Jan 1993 0.9.8

* Jan 1994 1.0, also comp.lang.python starts up

  - builds across many Unices without alteration, uses GNU autoconf
  - sources and standard library reorganised
  - double quotes allowed for strings
  - keyword ``exec``, replacing built in function
  - keyword ``lambda``, and new functions ``map``, ``filter``, ``reduce``
  - ``xrange``
  - ``__name__`` introduced, the ``if __name__ == '__main__': main()`` trick
    is introduced
  - printing an object uses its ``__str__`` method.

* Oct 1994 1.1

  - ``__getattr__`` and friends introduced
  - ``__call__``
  - threads should work on most platforms
  - tkinter
  - signal, curses, urlparse

* Apr 1995 (probably) 1.2

  - ``import a.b.c`` and ``from a.b.c import name`` are supported, but not yet
    implemented. ``__import__`` function and ``imp`` module expose import
    functionality.
  - pickle and shelve
  - docstrings via the ``__doc__`` attribute, string literals allowed for
    modules, classes and functions (it will take quite a long while before
    everything in the standard library has doc strings - essentially until
    Python 1.5)
  - Mark Hammond's support for Windows NT
  - exceptions can be classes (all built in exceptions are still strings)

* Oct 1995 (probably) 1.3

  - keyword arguments (a whole new chapter in the tutorial)
  - htmllib rewritten, incompatibly
  - ``globals()`` and ``locals()`` to get the global and local variables
  - the ``ni`` module supports importing modules with hierarchical names. So,
    for instance::

      import ni
      ni.ni()
      from a.b.c import name

* Oct 1996 1.4

  - library reference now maintained in Framemaker
  - name mangling to provide a simple form of class private variables:
    ``__spam``
  - ``access`` is no longer a reserved word
  - ``lstrip`` and ``rstrip``, third argument to ``split``
  - "The PC build procedure now really works"
  - ``...`` (Ellipses) provided for use by Numerical Python
  - ``x**y`` (same as ``pow(x,y)``)
  - complex numbers

  - keyword arguments ???

* Dec 1997 1.5

  - recommends ``#!/usr/bin/env python`` instead of ``#!/usr/local/bin/python``
  - ``-O`` produces ``.pyo`` files instead of ``.pyc`` files - removes
    SET_LINENO instructions and assert statements
  - private variables starting ``__`` are now a permanent feature
  - raw strings ``r"'n"``
  - ``assert`` statement
  - ``raise SomeClass, some_value`` where ``some_value`` is not an instance of
    ``SomeClass`` raises ``SomeClass(some_value)``.
  - thread safe ``sys.exc_info()``
  - string interning
  - ``int()``, ``long()`` and ``float()`` can now take string arguments
  - the "Don Beaudry hook" for metaclasses
  - new, experimental ``re.py`` regular expression module was introduced, and
    then almost immediately replaced by an even newer one based on Philip
    Hazel's ``pcre``. The old ``regex`` module is officially obsolete, but
    still there.
  - pprint.py
  - Python builds as a single library file, libpython1.5.a
  - os.path.join (and friends) take more than two arguments
  - issubclass and isinstance
  - ``dict.get()``
  - ``import spam.ham.eggs`` supported directly, ``ni`` declared obsolete,
    ``__init__.py`` files required)
  - all standard exceptions are now classes (by default)
  - OS/2 support (!)

  PythonWin and other associated Windows support is still released separately
  by Mark Hammond.

* Apr 1999 1.5.2

  - docs separated out into a separate distributable
  - IDLE introduced
  - bare ``raise`` re-raises
  - """Added a hack so that when you type 'quit' or 'exit' at the interpreter,
    you get a friendly explanation of how to press Ctrl-D (or Ctrl-Z) to
    exit."""
  - list ``pop`` method, experimentally
  - ``ndiff.py`` - Tim Peter's text diffing tool

* Sep 2000 1.6 penultimate CNRI version
* 1.6.1 same with a GPL compatible license

  The "What's New" notes for Python 2.0 say:

  """Python 1.6 can be thought of as the Contractual Obligations Python
  release. After the core development team left CNRI in May 2000, CNRI
  requested that a 1.6 release be created, containing all the work on Python
  that had been performed at CNRI. Python 1.6 therefore represents the state
  of the CVS tree as of May 2000, with the most significant new feature being
  Unicode support. Development continued after May, of course, so the 1.6 tree
  received a few fixes to ensure that it’s forward-compatible with Python 2.0.
  1.6 is therefore part of Python’s evolution, and not a side branch.

  So, should you take much interest in Python 1.6? Probably not. The 1.6final
  and 2.0beta1 releases were made on the same day (September 5, 2000), the
  plan being to finalize Python 2.0 within a month or so. If you have
  applications to maintain, there seems little point in breaking things by
  moving to 1.6, fixing them, and then having another round of breakage within
  a month by moving to 2.0; you’re better off just going straight to 2.0. Most
  of the really interesting features described in this document are only in
  2.0, because a lot of work was done between May and September."""

* Oct 2000 2.0 first non-CNRI version

  - modern Python license
  - now on sourceforge, development process opened up
  - PEPs introduced as the way to introduce changes
  - unicode added
  - list comprehensions ``[x**2 for x in range(10)]``
  - string methods (``",".join([1,2,3]``)
  - garbage collections copes with reference cycles
  - Augmented assignment (``+=`` and so on).
  - ``import module as name``
  - ``print >> file, "Hello"``
  - ``zip``, dictionary ``setdefault``
  - finally all C code is ANSI C

* Jun 2001 2.0.1

* Apr 2001 2.1 license now "Python Software Foundation License"

  - PSF "owns" Python
  - Nested scopes (off by default)

* Dec 2001 2.1
  - Nested scopes on by default
  - generators
  - Unifications of types (C) and classes (Python)
  - ``True`` and ``False`` appear in 2.2.1

* Jul 2003 2.3

  - ``bool`` type appears, ``True`` and ``False`` are now type ``bool``

* Nov 2004 2.4

  - generator expressions

* Sep 2006 2.5

* Oct 2008 2.6

  - warnings mode for features removed in 3.0

* Jul 2010 2.7 Will be supported until 2020

  - backports from 3.1. 

* Dec 2008 3.0

* Jun 2009 3.1

* Feb 2011 3.2

* Sep 2012 3.3

* Mar 2014 3.4

* Sep 2015 3.5

* Dec 2016 3.6

.. vim: set filetype=rst tabstop=8 softtabstop=2 shiftwidth=2 expandtab:
