Notes to be incorporated into the timeline
==========================================

Difficult to say exactly when I started using Python - the earlies piece of my
code with a date on it that I've found is from 1994.

The first PyCon

The first PyConUK

The start of CamPUG

* PyConUK 2014, keynote: https://www.youtube.com/watch?v=CI_RPSbsRw8,
  A time traveler's guide to Python, Jessica McKellar

* Monty Python, not snakes (and Guido's reluctance to see snakes associated
  with the language)
* Early web browser written in Python https://en.wikipedia.org/wiki/Grail_(web_browser)

  Grail was a free extensible multi-platform web browser written in the Python
  programming language. The project was started in August 1995, with its first
  public release in November of that year.[3] The 0.3 beta contained over
  27,000 lines of Python.[3] The last official release was version 0.6 in
  1999.

  One of the major distinguishing features of Grail was the ability to run
  client-side Python code

  * https://en.wikipedia.org/wiki/Netscape started as:
  * https://en.wikipedia.org/wiki/Mosaic_(web_browser) 1992
  * https://en.wikipedia.org/wiki/Internet_Explorer 1994

  * http://grail.sourceforge.net/
  * https://github.com/mdoege/Trail - Grail fork
  * https://github.com/ashumeow/grail - Grail fork
  * https://www.reddit.com/r/Python/comments/3dthqf/grail_a_python_web_browser_from_the_90s_written/ (1 year ago)

    * https://github.com/mdoege/grailbrowser - fork that says it works with
      Python 2.7

* the Usenet days - back when you could read all of comp.lang.python every day
* Starship Python

* the Zen of Python, Guido's time machine, the PSF, and other jokes

  * https://www.python.org/doc/humor/
  * https://wiki.python.org/moin/Humor
  * https://www.youtube.com/watch?v=gJ4duC-V6Xw&feature=youtu.be - Monty
    Python Jokes for Pythonistas
  * https://xkcd.com/353/
  * timbot
  * Zen of Python (Tim Peters, comp.lang.python, 4 June 1999)

    * https://www.wefearchange.org/2010/06/import-this-and-zen-of-python.html
      ("import yhis" from 2001)
    * https://www.python.org/dev/peps/pep-0020/

  * Guido's time machine

    * https://speakerdeck.com/pyconza/pyconza-2014-what-i-learned-about-python-and-about-guidos-time-machine-by-reading-the-python-ideas-mailing-list-by-david-mertz
    * https://archive.org/details/pyconza2014-python-ideas (video)

  * https://mail.python.org/pipermail/python-list/2001-February/063576.html
    Python the role playing game
  * PSU: Python Sectret Underground (who do not exist)

    * https://groups.google.com/forum/#!search/The$20PSU$27s$20Existence$20Revealed$20comp.lang.python/comp.lang.python/AFqy7ItagYM/XxW95wMEpEoJ
    * https://groups.google.com/forum/#!search/The$20PSU$27s$20Existence$20Revealed$20comp.lang.python/comp.lang.python/st0yPgpr-aU/wXTiFFAugNEJ
    * https://groups.google.com/forum/#!search/Status$20of$20the$20PSU$20comp.lang.python/comp.lang.python/7UAoH95mUpw/rrTUUXz-SmYJ
    * https://groups.google.com/forum/#!topic/comp.lang.python/VNXTFOdWPI0%5B151-175%5D
    * https://groups.google.com/forum/#!msg/comp.lang.python/7qszKYUqqwI/goDCgE78U_EJ (Roswell)
    * https://groups.google.com/forum/#!search/Status$20of$20the$20PSU$20comp.lang.python/comp.lang.python/G293F7R5_Y4/PzrfgpXGA5EJ
    * https://groups.google.com/forum/#!search/roswell$20PSU$20comp.lang.python/comp.lang.python/hxUeYn94Cis/u6xMo-MuKEkJ
    * https://groups.google.com/forum/#!search/alien$20whitespace/comp.lang.python/V4EEmLncO5E/T5be4rZAB9MJ (Alien whitespace eating nanovirus)

* Python easter eggs: https://www.youtube.com/watch?v=R4tkq6AhGCw
  * import this
  * import antigravity
  * from __future__ import braces
  * from __future__ import barry_as_FLUFL (does this still work?)

* Guido - release a new version and go on holiday
* Tim Peters and timsort (2002)

  * http://stackoverflow.com/users/2705542/tim-peters
  * http://wiki.c2.com/?TimPeters
  * https://www.youtube.com/watch?v=1wAOy88WxmY Interview with Tim Peters,
    PyCon 2006
  * https://www.python.org/dev/peps/pep-0020/ The Zen of Python is a PEP
  * https://www.cs.duke.edu/courses/cps006/fall10/notes/slides14-4up.pdf
  * https://en.wikipedia.org/wiki/Timsort
  * the source code for timsort contains wonderful explanatory comments
  * http://bugs.python.org/file4451/timsort.txt
  * http://www.drmaciver.com/2010/01/understanding-timsort-1adaptive-mergesort/
  * he invented doctest

    * https://docs.python.org/2/library/doctest.html
    * https://en.wikipedia.org/wiki/Doctest

* Python, Perl, Parrot

  * Fake Parrot interview: http://www.perl.com/pub/2001/04/01/parrot.htm
  * https://github.com/parrot is the real project
 
  From video https://www.youtube.com/watch?v=gJ4duC-V6Xw&feature=youtu.be

  "Pie-thon" challenge:

  * http://grokbase.com/t/perl/perl6-internals/032391mt4t/the-2004-performance-challenge-is-on
  * http://archive.oreilly.com/pub/a/oscon2004/friday/index.html - 

* Matz and Ruby (maybe not)
* tkinter, and why
* dictionaries all the way down
* doc strings
* Zope
* reStructuredText, docutils and David Goodger
* the doc-sig and approaches to typing in the docstring or comments
* sphynx, and the conversion of the Python docs to reStructuredText
* jpython/Jython, IronPython, PyPy and so on (and Stackless Python)
* the story of 2.0 and Python licenses (and where Guido worked)
* PEPs, and the importance of being able to implement experimental things *in*
  Python, because its insides are so exposed
* decorators - their introduction without a special syntax, the long
  discussion on that syntax
* the with clause
* the history that led to "a = b if c else d"



Useful links
============
https://en.wikipedia.org/wiki/History_of_Python

* https://en.wikipedia.org/wiki/Python_%28programming_language%29
* https://en.wikibooks.org/wiki/Python_Programming/Version_history
* https://www.python.org/downloads/ for versions 2.7.12 - 3.6.0
* https://www.python.org/download/releases/ for versions 1.1 - 1.6.1 (binaries)
* http://legacy.python.org/download/releases/src/ for source releases for
  versions 1.0.1 - 2.0
* https://docs.python.org/3/license.html - history and license
* https://www.python.org/download/releases/1.6.1/ specifically
* https://hg.python.org/cpython/raw-file/v2.0.1/Misc/NEWS - what was new in
  Python 2.0.1 and all the previous versions that succeeded 1.5.2 (i.e.,
  including 1.6)
* http://python-history.blogspot.co.uk/ - The History of Python by Guido
* https://www.packtpub.com/books/content/brief-history-python - A Brief
  History of Python by Sam Wood, Oct 2015
* http://www.artima.com/intv/pythonP.html - The Making of Python - Interview
  with Guido
* http://legacy.python.org/dev/peps/pep-0001/
* https://www.python.org/download/alternatives/ - Alternative Python
  implementations
* http://starship.python.net/ - the Starship
* https://www.python.org/download/releases/1.5/whatsnew/
* https://www.python.org/download/releases/1.5/ -- 1.5.2
* https://www.python.org/download/releases/1.6.1/
* http://legacy.python.org/download/releases/src/README - historical Python
  sources, up to 2.0
* http://legacy.python.org/search/hypermail/python-1993/0001.html -
  announcement of 0.9.8, Jan 1993
* https://www.python.org/doc/versions/ - Python documentation by version, back
  to 1.4
* https://dzone.com/articles/how-python-became-language - How Python Became
  the Language of Choice for Data Science 
* https://people.eecs.berkeley.edu/~bh/proglang.html - scheme vs. Python
* http://legacy.python.org/search/hypermail/python-1992/0270.html - 0.9.4alpha
  announcement, Dec 91
* https://www.w3.org/Tools/Python/Overview.html - the Python WWW tools
* http://dalkescientific.com/writings/diary/archive/2009/03/27/python_0_9_1p1.html
  - Andrew Dalke resurrected Python 0.9.1 (And very primitive it is too. No
  copyright message when it starts up. Bad error reporting. Class delaration
  requires a () even when there are no parents. There's no __init__ special
  method, so the convention is to call 'Create()' yourself. Uses 'self' and
  'this' and other terms instead of only 'self'. Only understands 'single
  quote strings' and not "double quotes." )
* https://opensource.org/licenses/Python-2.0 - Python 2.0 license

* https://www.youtube.com/channel/UChA9XP_feY1-1oSy2L7acog - PyCon UK videos
* https://www.youtube.com/watch?v=CI_RPSbsRw8 - Pycon UK 2014 keynote: A time
  traveler's guide to Python, Jessica McKellar
* https://www.youtube.com/watch?v=zHgASlRMpg4 - Python Tutorial: History of
  the Python Programming Language, Feb 2015
* http://pyvideo.org/pycon-us-2012/diversity-in-practice-how-the-boston-python-user.html 
  - Diversity in practice: How the Boston Python User Group grew to 1700
  people and over 15% women 

Python 2.7 will not be maintained past 2020 (https://pythonclock.org/)

* http://pybit.es/python-porting.html Best Practices for Compatible Python 2 and 3 Code, Mar 2017
* http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html The key differences between Python 2.7.x and Python 3.x with examples, Jun 2014 
* http://python-future.org/compatible_idioms.html Cheat Sheet: Writing Python 2-3 compatible code (last date 2016)
* http://www.asmeurer.com/python3-presentation/slides.html#1 - 10 awesome
  features of Python that you can't use because you refuse to upgrade to
  Python 3 - goes up to about 3.5, Mar 2016

* https://en.wikipedia.org/wiki/Sphinx_(documentation_generator)
* Georg Brandl, 2008, for Python documentation
* https://raw.githubusercontent.com/sphinx-doc/sphinx/master/CHANGES.old for
  old versions back to first release
* http://pythonic.pocoo.org/2008/3/21/sphinx-is-released appears to be 400 Bad
  Request. I think http://archive.is/Dgon is an archive of it
* Fredrik Lundh had his http://effbot.org/zone/pyref.htm An Alternative Python Reference which I think may have come first?
* http://robertlehmann.de/img/sphinx.pdf - some history. About George Brandl
  it says """In 2008 , he received the Python Software Foundation Community Award for “building the Sphinx documentation system as an alternative to the LaTeX-based system [they] had been using previously, and converting the Python documentation to use it.”"""
* http://pythonic.pocoo.org/2007/6/23/introducing-py-rest-doc - another 400


* http://pyvideo.org/europython-2012/the-story-of-stackless-python.html
  (video, 54 minutes)
* https://en.wikipedia.org/wiki/Stackless_Python

* http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/
* https://en.wikipedia.org/wiki/Pyrex_(programming_language)

* http://cython.org/
* https://en.wikipedia.org/wiki/Cython

* http://nuitka.net/
* https://docs.python.org/3/faq/design.html#can-python-be-compiled-to-machine-code-c-or-some-other-language

* http://pypy.org/
* https://en.wikipedia.org/wiki/PyPy#RPython

* https://ironpython-test.readthedocs.io/en/latest/contents.html
* https://ironpython-test.readthedocs.io/en/latest/license.html

  """IronPython was created in 2005 by Jim Hugunin to prove that the .NET
  Framework was a poor platform for dynamic languages. He failed to do so, and
  IronPython was born."""

* http://ironpython.net/
* https://en.wikipedia.org/wiki/IronPython

* http://www.jython.org/archive/22/history.html

  """JPython was created in late 1997 by Jim Hugunin. Jim was also the primary
  developer while he was at CNRI. In February 1999 Barry Warsaw took over as
  primary developer and released JPython version 1.1. In October 2000 Barry
  helped move the software to SourceForge where it was renamed to Jython.
  Barry then made Finn Bock the primary maintainer."""

* http://hugunin.net/story_of_jython.html
* https://en.wikipedia.org/wiki/Jython

(providing Java support in Gothic - when I could run up Jython and code
Python, I knew we'd done it)

https://www.infoq.com/news/2016/01/python-moving-to-github
https://snarky.ca/the-history-behind-the-decision-to-move-python-to-github/
https://www.python.org/dev/peps/pep-0512/ - Migrating from hg.python.org to GitHub
https://mail.python.org/pipermail/python-dev/2017-February/147341.html

Useful link that also does a brief history of IPython and Jupyter (and how to
use nteract):
http://www.numfocus.org/blog/nteract-building-on-top-of-jupyter-from-a-rich-repl-toolkit-to-interactive-notebooks

https://en.wikipedia.org/wiki/ReStructuredText

Timeline makers:

* https://www.preceden.com/timeline-makers - list of 33 choices
* https://www.beedocs.com/timeline3D/mac/
* http://www.ispringsolutions.com/blog/top-10-free-and-paid-interactive-timeline-makers/
* https://support.office.com/en-gb/article/Create-a-timeline-9c4448a9-99c7-4b0e-8eff-0dcf535f223c - using Excel

Why I like Python
=================
* runnable pseudo-code - especially the significant indentation
* dictionaries all the way down - high level datastructures built in
* exposes its innards - very unusually for a programming language, it allows
  itself to be modified - at least two implementations of goto (!) and Hy
* "safe"/"sane" - a sensible language written and designed by sensible people

- http://entrian.com/goto/ (goto and comefrom)
- https://github.com/snoack/python-goto
- and another https://github.com/cdjc/goto
- http://docs.hylang.org/en/latest/ - a Lisp-flavoured Python

.. vim: set filetype=rst tabstop=8 softtabstop=2 shiftwidth=2 expandtab:
